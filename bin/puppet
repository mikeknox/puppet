#!/usr/bin/env ruby

#
# = Synopsis
#
# Run a stand-alone +puppet+ manifest.
#
# = Usage
#
#   puppet apply [-h|--help] [-V|--version] [-d|--debug] [-v|--verbose] [-e|--execute]
#               [--detailed-exitcodes] [-l|--logdest <file>] <file>
#
# = Description
#
# This is the standalone puppet execution tool; use it to execute
# individual manifests that you write.  If you need to execute site-wide
# manifests, use 'puppet agent' and 'puppet master'.
#
# = Options
#
# Note that any configuration parameter that's valid in the configuration file
# is also a valid long argument.  For example, 'ssldir' is a valid configuration
# parameter, so you can specify '--ssldir <directory>' as an argument.
#
# See the configuration file documentation at
# http://reductivelabs.com/trac/puppet/wiki/ConfigurationReference for
# the full list of acceptable parameters. A commented list of all
# configuration options can also be generated by running puppet with
# '--genconfig'.
#
# debug::
#   Enable full debugging.
#
# detailed-exitcodes::
#   Provide transaction information via exit codes.  If this is enabled, an exit
#   code of '2' means there were changes, and an exit code of '4' means that there
#   were failures during the transaction.
#
# help::
#   Print this help message
#
# loadclasses::
#   Load any stored classes. 'puppet agent' caches configured classes (usually at
#   /etc/puppet/classes.txt), and setting this option causes all of those classes
#   to be set in your puppet manifest.
#
# logdest::
#   Where to send messages.  Choose between syslog, the console, and a log file.
#   Defaults to sending messages to the console.
#
# execute::
#   Execute a specific piece of Puppet code
#
# verbose::
#   Print extra information.
#
# = Example
#
#   puppet -l /tmp/manifest.log manifest.pp
#
# = Author
#
# Luke Kanies
#
# = Copyright
#
# Copyright (c) 2005 Reductive Labs, LLC
# Licensed under the GNU Public License

#Puppet::Application[:apply].run # this is so the RDoc::usage hack can find this file

appdir = File.join('puppet', 'application')
absolute_appdir = $:.collect { |x| File.join(x,'puppet','application') }.detect{ |x| File.directory?(x) }
builtins = Dir[File.join(absolute_appdir, '*.rb')].map{|fn| File.basename(fn, '.rb')}

usage = "Usage: puppet command <space separated arguments>"
available = "Available commands are: #{builtins.sort.join(', ')}"

require 'puppet/util/command_line'
subcommand_name = Puppet::Util::CommandLine.subcommand_name

if subcommand_name.nil?
    puts usage, available
elsif builtins.include?(subcommand_name) #subcommand
    require File.join(appdir, subcommand_name)
    Puppet::Application[subcommand_name].run
else
    abort "Error: Unknown command #{subcommand_name}.\n#{usage}\n#{available}"
end
