#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/expression'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..ida6ee45a68a', 'grammar.ra', 840

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..ida6ee45a68a

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 65, :_reduce_1,
 1, 65, :_reduce_none,
 1, 66, :_reduce_none,
 2, 66, :_reduce_4,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 4, 76, :_reduce_18,
 5, 76, :_reduce_19,
 3, 76, :_reduce_20,
 2, 76, :_reduce_21,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 3, 82, :_reduce_24,
 3, 82, :_reduce_25,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_34,
 5, 69, :_reduce_35,
 5, 69, :_reduce_36,
 5, 69, :_reduce_37,
 5, 80, :_reduce_38,
 2, 70, :_reduce_39,
 1, 100, :_reduce_40,
 2, 100, :_reduce_41,
 6, 71, :_reduce_42,
 2, 71, :_reduce_43,
 3, 101, :_reduce_44,
 3, 101, :_reduce_45,
 1, 102, :_reduce_none,
 1, 102, :_reduce_none,
 3, 102, :_reduce_48,
 1, 103, :_reduce_none,
 3, 103, :_reduce_50,
 1, 104, :_reduce_51,
 1, 104, :_reduce_52,
 3, 105, :_reduce_53,
 3, 105, :_reduce_54,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 4, 108, :_reduce_57,
 1, 94, :_reduce_none,
 3, 94, :_reduce_59,
 0, 95, :_reduce_none,
 1, 95, :_reduce_none,
 1, 110, :_reduce_62,
 1, 85, :_reduce_63,
 1, 87, :_reduce_64,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 3, 72, :_reduce_72,
 3, 72, :_reduce_73,
 3, 81, :_reduce_74,
 0, 96, :_reduce_75,
 1, 96, :_reduce_76,
 3, 96, :_reduce_77,
 3, 114, :_reduce_78,
 3, 116, :_reduce_79,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 0, 99, :_reduce_82,
 1, 99, :_reduce_83,
 3, 99, :_reduce_84,
 1, 118, :_reduce_none,
 3, 118, :_reduce_86,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 4, 89, :_reduce_105,
 3, 89, :_reduce_106,
 1, 91, :_reduce_107,
 2, 91, :_reduce_108,
 2, 121, :_reduce_109,
 1, 122, :_reduce_110,
 2, 122, :_reduce_111,
 1, 88, :_reduce_112,
 4, 84, :_reduce_113,
 4, 84, :_reduce_114,
 6, 74, :_reduce_115,
 5, 74, :_reduce_116,
 0, 123, :_reduce_none,
 4, 123, :_reduce_118,
 3, 123, :_reduce_119,
 1, 112, :_reduce_none,
 3, 112, :_reduce_121,
 3, 112, :_reduce_122,
 3, 112, :_reduce_123,
 3, 112, :_reduce_124,
 3, 112, :_reduce_125,
 3, 112, :_reduce_126,
 3, 112, :_reduce_127,
 3, 112, :_reduce_128,
 2, 112, :_reduce_129,
 3, 112, :_reduce_130,
 3, 112, :_reduce_131,
 3, 112, :_reduce_132,
 3, 112, :_reduce_133,
 3, 112, :_reduce_134,
 3, 112, :_reduce_135,
 2, 112, :_reduce_136,
 3, 112, :_reduce_137,
 3, 112, :_reduce_138,
 3, 112, :_reduce_139,
 5, 73, :_reduce_140,
 1, 125, :_reduce_none,
 2, 125, :_reduce_142,
 5, 126, :_reduce_143,
 4, 126, :_reduce_144,
 1, 127, :_reduce_none,
 3, 127, :_reduce_146,
 3, 90, :_reduce_147,
 1, 129, :_reduce_none,
 4, 129, :_reduce_149,
 1, 131, :_reduce_none,
 3, 131, :_reduce_151,
 3, 130, :_reduce_152,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_none,
 1, 128, :_reduce_160,
 1, 128, :_reduce_none,
 1, 132, :_reduce_162,
 1, 133, :_reduce_none,
 3, 133, :_reduce_164,
 2, 75, :_reduce_165,
 6, 77, :_reduce_166,
 5, 77, :_reduce_167,
 7, 78, :_reduce_168,
 6, 78, :_reduce_169,
 6, 79, :_reduce_170,
 5, 79, :_reduce_171,
 1, 98, :_reduce_172,
 1, 93, :_reduce_173,
 1, 93, :_reduce_174,
 1, 93, :_reduce_175,
 1, 136, :_reduce_none,
 3, 136, :_reduce_177,
 1, 138, :_reduce_178,
 1, 139, :_reduce_179,
 1, 139, :_reduce_180,
 1, 139, :_reduce_181,
 1, 139, :_reduce_none,
 0, 67, :_reduce_183,
 0, 140, :_reduce_184,
 1, 134, :_reduce_none,
 3, 134, :_reduce_186,
 3, 134, :_reduce_187,
 1, 141, :_reduce_none,
 3, 141, :_reduce_189,
 3, 142, :_reduce_190,
 1, 142, :_reduce_191,
 3, 142, :_reduce_192,
 1, 142, :_reduce_193,
 1, 137, :_reduce_none,
 2, 137, :_reduce_195,
 1, 135, :_reduce_none,
 2, 135, :_reduce_197,
 1, 143, :_reduce_none,
 1, 143, :_reduce_none,
 1, 86, :_reduce_200,
 3, 111, :_reduce_201,
 4, 111, :_reduce_202,
 2, 111, :_reduce_203,
 1, 119, :_reduce_none,
 1, 119, :_reduce_none,
 0, 97, :_reduce_none,
 1, 97, :_reduce_207,
 1, 124, :_reduce_208,
 3, 120, :_reduce_209,
 4, 120, :_reduce_210,
 2, 120, :_reduce_211,
 1, 144, :_reduce_none,
 3, 144, :_reduce_213,
 3, 145, :_reduce_214,
 1, 146, :_reduce_215,
 1, 146, :_reduce_216,
 4, 113, :_reduce_217,
 1, 92, :_reduce_none,
 4, 92, :_reduce_219 ]

racc_reduce_n = 220

racc_shift_n = 365

racc_action_table = [
    60,    65,    60,    65,    95,   121,    95,   216,    97,   187,
    71,   113,   108,   187,   109,    46,   285,   217,   281,    46,
   186,    60,    65,   216,   186,   191,   280,   110,   154,   191,
   122,    46,   144,    59,   325,    59,   154,    72,   133,    72,
    75,    80,   326,    80,   278,   279,   131,   170,    68,   222,
    77,   106,    77,    50,    59,   161,    53,    50,    72,    75,
    53,    52,    80,    52,    60,    65,    66,    68,   150,    50,
   239,    77,    53,   327,    60,    65,    52,   167,   171,   286,
    52,   315,    52,   173,   157,   158,   159,   160,   162,   287,
   167,   171,    52,    60,    65,    60,    65,   186,   278,   279,
   223,    72,   237,   231,   348,    80,   187,   186,   289,    43,
   131,    72,   237,   224,    77,    80,   244,   186,    41,    42,
   131,   290,   191,   288,    77,    52,    59,   105,   186,   170,
    72,    75,    72,   237,    80,    52,    80,   161,    66,    68,
    34,   131,   187,    77,    36,    77,    60,    65,    60,    65,
    95,    11,    97,   186,    52,   182,    52,   201,   191,  -157,
    60,    65,   202,   293,    71,   173,   157,   158,   159,   160,
   162,   283,   167,   171,    34,   231,   232,   268,    36,    59,
   267,   296,    62,    72,    75,    11,   181,    80,    60,    65,
   167,   171,    68,    59,  -155,   321,    77,    72,    75,   233,
  -158,    80,   299,   231,   232,    66,    68,    52,    60,    65,
    77,    34,    95,    34,    97,    36,  -159,    36,  -154,   197,
   201,    52,    11,    16,    11,   202,   181,    60,    65,   303,
    88,    95,   276,    97,    60,    65,   278,   279,    95,   197,
    97,    59,   158,   159,   144,    72,    75,   167,   171,    80,
   306,   108,  -156,   309,    68,    93,    88,  -153,    77,   269,
    59,    83,   312,   154,    72,    75,   153,    59,    80,    52,
  -153,    72,    75,    68,   266,    80,    52,    77,   231,   265,
    68,    93,  -156,  -154,    77,    60,    65,    83,    52,    95,
   183,    97,   158,   159,    52,    52,   184,   167,   171,   150,
  -172,  -155,   147,    43,    60,    65,  -157,    88,    95,   195,
    97,    60,    65,  -158,   318,    95,   197,    97,    59,   319,
   200,   144,    72,    75,   206,   207,    80,   210,   213,    60,
    65,    68,    93,   216,   109,    77,   220,    59,    83,   338,
   113,    72,    75,   111,    59,    80,    52,  -155,    72,    75,
    68,   105,    80,    55,    77,    54,   217,    68,    45,   215,
   318,    77,   186,   352,  -153,    52,    72,   237,   354,  -158,
    80,  -155,    52,  -153,  -156,   131,    60,    65,  -154,    77,
    95,   355,    97,   217,   173,   157,   158,   159,  -207,  -156,
    52,   167,   171,   358,   220,    60,    65,    37,    88,    95,
   219,    97,    60,    65,  -154,   nil,    95,   nil,    97,    59,
   nil,   nil,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,
    60,    65,    68,    93,    88,   nil,    77,   nil,    59,    83,
   nil,   nil,    72,    75,   nil,    59,    80,    52,   nil,    72,
    75,    68,   nil,    80,   nil,    77,   nil,   nil,    68,    93,
   nil,   nil,    77,   186,   nil,    83,    52,    72,   237,   nil,
   nil,    80,   nil,    52,   nil,   nil,   131,    60,    65,   nil,
    77,    95,   nil,    97,   nil,   173,   157,   158,   159,   160,
   162,    52,   167,   171,   nil,    60,    65,   nil,   nil,    88,
   nil,   nil,   324,   nil,   173,   157,   158,   159,   nil,   nil,
    59,   167,   171,   nil,    72,    75,   nil,   nil,    80,   nil,
   nil,   nil,   nil,    68,    93,    60,    65,    77,   186,    95,
    83,    97,    72,   237,   nil,   nil,    80,   nil,    52,   nil,
   nil,   131,   nil,   nil,   nil,    77,   nil,    88,   nil,   nil,
   nil,    60,    65,   nil,   nil,    95,    52,    97,    59,   nil,
   nil,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    68,    93,    60,    65,    77,   nil,    95,    83,    97,
   nil,   nil,   nil,   nil,    59,   nil,    52,   nil,    72,    75,
   nil,   nil,    80,   nil,   nil,    88,   nil,    68,   nil,    60,
    65,    77,   nil,    95,   nil,    97,    59,   nil,   nil,   nil,
    72,    75,    52,   nil,    80,   nil,   nil,   nil,   nil,    68,
    93,    88,   nil,    77,   nil,   nil,    83,   nil,   nil,    60,
    65,   nil,    59,    95,    52,    97,    72,    75,   nil,   nil,
    80,   nil,   nil,   nil,   nil,    68,    93,   nil,   nil,    77,
   nil,    88,    83,   nil,    60,    65,   nil,   nil,   nil,   nil,
    52,   nil,    59,   nil,   nil,   nil,    72,    75,   nil,   nil,
    80,   nil,   nil,   nil,   nil,    68,    93,   145,   nil,    77,
    60,    65,    83,   nil,    95,   nil,    97,    59,   nil,   nil,
    52,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,    66,
    68,   nil,    88,   nil,    77,   nil,    60,    65,   nil,   nil,
    95,   nil,    97,    59,   nil,    52,   nil,    72,    75,   nil,
   nil,    80,   nil,   nil,   nil,   nil,    68,    93,    88,   nil,
    77,    60,    65,    83,   nil,    95,   nil,    97,   nil,    59,
   nil,    52,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,
   nil,   nil,    68,    93,   nil,   nil,    77,    60,    65,    83,
   nil,    95,   nil,    97,    59,   nil,   nil,    52,    72,    75,
   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,   nil,    88,
   nil,    77,   nil,    60,    65,   nil,   nil,    95,   nil,    97,
    59,   nil,    52,   nil,    72,    75,   nil,   nil,    80,   nil,
   nil,    60,    65,    68,    93,    88,   nil,    77,    60,    65,
    83,   nil,    95,   nil,    97,   nil,    59,   nil,    52,   nil,
    72,    75,    60,    65,    80,   nil,    95,   nil,    97,    68,
    93,   nil,   nil,    77,   186,   nil,    83,   nil,    72,   237,
   nil,    59,    80,   nil,    52,    72,    75,   131,   nil,    80,
   nil,    77,    60,    65,    68,    59,   nil,   nil,    77,    72,
    75,   nil,    52,    80,   nil,   nil,   nil,   nil,    68,    52,
    60,    65,    77,   nil,    95,   308,    97,   nil,   nil,   nil,
   nil,   nil,   nil,    52,   nil,    59,   nil,   nil,   nil,    72,
    75,   nil,    88,    80,   nil,    60,    65,    66,    68,    95,
   nil,    97,    77,    59,   nil,   nil,   nil,    72,    75,   nil,
   nil,    80,   nil,    52,   nil,   nil,    68,    93,   nil,   nil,
    77,    60,    65,    83,   nil,    95,   nil,    97,    59,   nil,
   nil,    52,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    68,    60,    65,   nil,    77,    95,   nil,    97,   nil,
   nil,   nil,   nil,   nil,    59,   nil,    52,   nil,    72,    75,
   nil,   nil,    80,   nil,    88,   nil,   nil,    68,    60,    65,
   nil,    77,    95,   nil,   nil,    59,   nil,   nil,   nil,    72,
    75,   nil,    52,    80,   nil,   nil,   nil,   nil,    68,    93,
    60,    65,    77,   nil,    95,    83,    97,   nil,   nil,   nil,
   nil,    59,   nil,    52,   nil,    72,   237,   nil,   nil,    80,
   nil,   nil,    88,   nil,   131,   nil,    60,    65,    77,   nil,
    95,   nil,    97,    59,   nil,   nil,   nil,    72,    75,    52,
   nil,    80,   nil,   nil,   nil,   nil,    68,    93,    88,   nil,
    77,   nil,   nil,    83,   nil,   nil,    60,    65,   nil,    59,
    95,    52,    97,    72,    75,   nil,   nil,    80,   nil,   nil,
   nil,   nil,    68,    93,   nil,   nil,    77,   nil,    88,    83,
   nil,   nil,    60,    65,   nil,   nil,    95,    52,    97,    59,
   nil,   nil,   nil,    72,    75,   nil,   nil,    80,   nil,   nil,
    60,    65,    68,    93,    88,   nil,    77,   nil,   nil,    83,
   nil,   nil,   nil,   nil,   nil,    59,   nil,    52,   nil,    72,
    75,   nil,   nil,    80,   nil,   nil,   nil,   nil,    68,    93,
    60,    65,    77,   186,    95,    83,    97,    72,   237,   172,
   nil,    80,   nil,    52,   nil,   nil,   131,   nil,   165,   170,
    77,   nil,    88,   nil,   nil,   nil,   nil,   161,   163,   166,
   169,    52,   nil,    59,   nil,   nil,   nil,    72,    75,    60,
    65,    80,   nil,    95,   175,    97,    68,    93,   nil,   nil,
    77,   164,   168,    83,   nil,   173,   157,   158,   159,   160,
   162,    52,   167,   171,    60,    65,   nil,   nil,    95,   nil,
    97,   nil,    59,   nil,   nil,   nil,    72,    75,   nil,   nil,
    80,   nil,   nil,   nil,   nil,    68,    88,   nil,   nil,    77,
    60,    65,   nil,   nil,    95,   nil,    97,    59,   nil,   nil,
    52,    72,    75,   nil,   nil,    80,   nil,   nil,   nil,   nil,
    68,    93,    88,   nil,    77,   nil,   nil,    83,   nil,   nil,
   nil,   nil,   nil,    59,   nil,    52,   nil,    72,    75,   nil,
   nil,    80,   227,   228,   nil,   nil,    68,    93,   nil,   nil,
    77,   nil,   nil,    83,   nil,   165,   170,   nil,   nil,   nil,
   nil,    52,   nil,   nil,   161,   163,   166,   169,   165,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   246,   161,   163,   166,
   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   168,
   nil,   nil,   173,   157,   158,   159,   160,   162,   nil,   167,
   171,   164,   168,   nil,   nil,   173,   157,   158,   159,   160,
   162,   nil,   167,   171,   165,   170,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   161,   163,   166,   169,   165,   170,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   161,   163,   166,   169,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   168,   nil,
   nil,   173,   157,   158,   159,   160,   162,   nil,   167,   171,
   164,   168,   nil,   nil,   173,   157,   158,   159,   160,   162,
   nil,   167,   171,   165,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   161,   163,   166,   169,   165,   170,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   161,   163,   166,   169,   nil,
   nil,   173,   157,   158,   159,   160,   162,   168,   167,   171,
   173,   157,   158,   159,   160,   162,   nil,   167,   171,   nil,
   nil,   nil,   nil,   173,   157,   158,   159,   160,   162,   nil,
   167,   171,   165,   170,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   161,   163,   166,   169,   170,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   161,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   161,   nil,   nil,   164,   168,   nil,   nil,   173,
   157,   158,   159,   160,   162,   nil,   167,   171,   263,   nil,
   nil,   173,   157,   158,   159,   160,   162,   nil,   167,   171,
   173,   157,   158,   159,   160,   162,   nil,   167,   171,    26,
   342,    30,     1,   nil,     8,    12,   nil,    19,   nil,    24,
   nil,    28,   nil,     2,   nil,   nil,    11,    16,   nil,   316,
   nil,    26,   nil,    30,     1,   nil,     8,    12,   nil,    19,
   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,
    26,   344,    30,     1,   nil,     8,    12,   nil,    19,   nil,
    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,   nil,
   345,   nil,    26,   nil,    30,     1,   nil,     8,    12,   nil,
    19,   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,
    16,    26,   298,    30,     1,   nil,     8,    12,   nil,    19,
   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,    16,
   nil,   356,   nil,    26,   nil,    30,     1,   nil,     8,    12,
   nil,    19,   nil,    24,   nil,    28,   nil,     2,   nil,   nil,
    11,    16,    26,   360,    30,     1,   nil,     8,    12,   nil,
    19,   nil,    24,   nil,    28,   nil,     2,   nil,   nil,    11,
    16,   nil,   362,   nil,    26,   nil,    30,     1,   nil,     8,
    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,   nil,
   nil,    11,    16,    26,   292,    30,     1,   nil,     8,    12,
   nil,    19,   nil,    24,   nil,    28,   nil,     2,   nil,   nil,
    11,    16,   nil,   363,   nil,    26,   nil,    30,     1,   nil,
     8,    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,
   nil,   nil,    11,    16,    26,   364,    30,     1,   nil,     8,
    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,   nil,
   nil,    11,    16,   nil,   nil,   nil,    26,   nil,    30,     1,
   nil,     8,    12,   nil,    19,   nil,    24,   nil,    28,   nil,
     2,   nil,   nil,    11,    16,    26,   nil,    30,     1,   nil,
     8,    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,
   nil,   nil,    11,    16,    26,   nil,    30,     1,   nil,     8,
    12,   nil,    19,   nil,    24,   nil,    28,   nil,     2,   nil,
   nil,    11,    16 ]

racc_action_check = [
    54,    54,   147,   147,    54,    48,   147,   144,   147,   110,
    75,    44,    31,   106,    31,    19,   199,   198,   192,   122,
   110,   150,   150,   133,   106,   110,   192,    31,    75,   106,
    48,   121,   195,    54,   272,   147,   133,    54,    54,   147,
   147,    54,   272,   147,   199,   199,    54,   256,   147,   144,
    54,    31,   147,    19,   150,   256,    19,   122,   150,   150,
   122,    54,   150,   147,   153,   153,   150,   150,   245,   121,
   153,   150,   121,   275,   349,   349,    19,   249,   249,   201,
   122,   245,   150,   256,   256,   256,   256,   256,   256,   202,
   256,   256,   121,   154,   154,   325,   325,   153,   275,   275,
   146,   153,   153,   314,   314,   153,   187,   349,   204,     8,
   153,   349,   349,   146,   153,   349,   154,   187,     8,     8,
   349,   204,   187,   203,   349,   153,   154,   184,   325,   259,
   154,   154,   325,   325,   154,   349,   325,   259,   154,   154,
    12,   325,   277,   154,    12,   325,   312,   312,    97,    97,
   312,    12,   312,   277,   154,    97,   325,   113,   277,    86,
    24,    24,   113,   209,    24,   259,   259,   259,   259,   259,
   259,   196,   259,   259,   210,   196,   196,   177,   210,   312,
   177,   210,    24,   312,   312,   210,    97,   312,   267,   267,
   248,   248,   312,    24,    91,   267,   312,    24,    24,   152,
    85,    24,   214,   152,   152,    24,    24,   312,    26,    26,
    24,     5,    26,     1,    26,     5,    84,     1,    82,   217,
   289,    24,     5,     5,     1,   289,   267,    28,    28,   218,
    26,    28,   188,    28,   157,   157,   188,   188,   157,   219,
   157,    26,   247,   247,   220,    26,    26,   247,   247,    26,
   221,    81,    79,   225,    26,    26,   157,    78,    26,   180,
    28,    26,   236,   237,    28,    28,    74,   157,    28,    26,
    98,   157,   157,    28,   176,   157,   171,    28,   176,   176,
   157,   157,    99,   101,   157,   158,   158,   157,    28,   158,
   102,   158,   264,   264,   167,   157,   104,   264,   264,    70,
    68,    67,    63,    59,   287,   287,    58,   158,   287,   107,
   287,   286,   286,    57,   263,   286,   109,   286,   158,   265,
   111,    55,   158,   158,   114,   117,   158,   118,   123,   281,
   281,   158,   158,   197,    40,   158,   282,   287,   158,   284,
    35,   287,   287,    33,   286,   287,   158,   128,   286,   286,
   287,    30,   286,    23,   287,    20,   304,   286,    13,   132,
   316,   286,   281,   318,   134,   287,   281,   281,   326,   329,
   281,   331,   286,   332,   334,   281,    41,    41,   335,   281,
    41,   337,    41,   135,   252,   252,   252,   252,   348,   136,
   281,   252,   252,   350,   140,    43,    43,     2,    41,    43,
   139,    43,    42,    42,   138,   nil,    42,   nil,    42,    41,
   nil,   nil,   nil,    41,    41,   nil,   nil,    41,   nil,   nil,
   280,   280,    41,    41,    42,   nil,    41,   nil,    43,    41,
   nil,   nil,    43,    43,   nil,    42,    43,    41,   nil,    42,
    42,    43,   nil,    42,   nil,    43,   nil,   nil,    42,    42,
   nil,   nil,    42,   280,   nil,    42,    43,   280,   280,   nil,
   nil,   280,   nil,    42,   nil,   nil,   280,    45,    45,   nil,
   280,    45,   nil,    45,   nil,   251,   251,   251,   251,   251,
   251,   280,   251,   251,   nil,   270,   270,   nil,   nil,    45,
   nil,   nil,   270,   nil,   250,   250,   250,   250,   nil,   nil,
    45,   250,   250,   nil,    45,    45,   nil,   nil,    45,   nil,
   nil,   nil,   nil,    45,    45,   159,   159,    45,   270,   159,
    45,   159,   270,   270,   nil,   nil,   270,   nil,    45,   nil,
   nil,   270,   nil,   nil,   nil,   270,   nil,   159,   nil,   nil,
   nil,   269,   269,   nil,   nil,   269,   270,   269,   159,   nil,
   nil,   nil,   159,   159,   nil,   nil,   159,   nil,   nil,   nil,
   nil,   159,   159,   160,   160,   159,   nil,   160,   159,   160,
   nil,   nil,   nil,   nil,   269,   nil,   159,   nil,   269,   269,
   nil,   nil,   269,   nil,   nil,   160,   nil,   269,   nil,   161,
   161,   269,   nil,   161,   nil,   161,   160,   nil,   nil,   nil,
   160,   160,   269,   nil,   160,   nil,   nil,   nil,   nil,   160,
   160,   161,   nil,   160,   nil,   nil,   160,   nil,   nil,   162,
   162,   nil,   161,   162,   160,   162,   161,   161,   nil,   nil,
   161,   nil,   nil,   nil,   nil,   161,   161,   nil,   nil,   161,
   nil,   162,   161,   nil,    62,    62,   nil,   nil,   nil,   nil,
   161,   nil,   162,   nil,   nil,   nil,   162,   162,   nil,   nil,
   162,   nil,   nil,   nil,   nil,   162,   162,    62,   nil,   162,
   163,   163,   162,   nil,   163,   nil,   163,    62,   nil,   nil,
   162,    62,    62,   nil,   nil,    62,   nil,   nil,   nil,    62,
    62,   nil,   163,   nil,    62,   nil,    65,    65,   nil,   nil,
    65,   nil,    65,   163,   nil,    62,   nil,   163,   163,   nil,
   nil,   163,   nil,   nil,   nil,   nil,   163,   163,    65,   nil,
   163,   108,   108,   163,   nil,   108,   nil,   108,   nil,    65,
   nil,   163,   nil,    65,    65,   nil,   nil,    65,   nil,   nil,
   nil,   nil,    65,    65,   nil,   nil,    65,   164,   164,    65,
   nil,   164,   nil,   164,   108,   nil,   nil,    65,   108,   108,
   nil,   nil,   108,   nil,   nil,   nil,   nil,   108,   nil,   164,
   nil,   108,   nil,   170,   170,   nil,   nil,   170,   nil,   170,
   164,   nil,   108,   nil,   164,   164,   nil,   nil,   164,   nil,
   nil,   239,   239,   164,   164,   170,   nil,   164,    71,    71,
   164,   nil,    71,   nil,    71,   nil,   170,   nil,   164,   nil,
   170,   170,   234,   234,   170,   nil,   234,   nil,   234,   170,
   170,   nil,   nil,   170,   239,   nil,   170,   nil,   239,   239,
   nil,    71,   239,   nil,   170,    71,    71,   239,   nil,    71,
   nil,   239,   223,   223,    71,   234,   nil,   nil,    71,   234,
   234,   nil,   239,   234,   nil,   nil,   nil,   nil,   234,    71,
   227,   227,   234,   nil,   227,   223,   227,   nil,   nil,   nil,
   nil,   nil,   nil,   234,   nil,   223,   nil,   nil,   nil,   223,
   223,   nil,   227,   223,   nil,   222,   222,   223,   223,   222,
   nil,   222,   223,   227,   nil,   nil,   nil,   227,   227,   nil,
   nil,   227,   nil,   223,   nil,   nil,   227,   227,   nil,   nil,
   227,   216,   216,   227,   nil,   216,   nil,   216,   222,   nil,
   nil,   227,   222,   222,   nil,   nil,   222,   nil,   nil,   nil,
   nil,   222,    83,    83,   nil,   222,    83,   nil,    83,   nil,
   nil,   nil,   nil,   nil,   216,   nil,   222,   nil,   216,   216,
   nil,   nil,   216,   nil,    83,   nil,   nil,   216,   215,   215,
   nil,   216,   215,   nil,   nil,    83,   nil,   nil,   nil,    83,
    83,   nil,   216,    83,   nil,   nil,   nil,   nil,    83,    83,
   166,   166,    83,   nil,   166,    83,   166,   nil,   nil,   nil,
   nil,   215,   nil,    83,   nil,   215,   215,   nil,   nil,   215,
   nil,   nil,   166,   nil,   215,   nil,   168,   168,   215,   nil,
   168,   nil,   168,   166,   nil,   nil,   nil,   166,   166,   215,
   nil,   166,   nil,   nil,   nil,   nil,   166,   166,   168,   nil,
   166,   nil,   nil,   166,   nil,   nil,    88,    88,   nil,   168,
    88,   166,    88,   168,   168,   nil,   nil,   168,   nil,   nil,
   nil,   nil,   168,   168,   nil,   nil,   168,   nil,    88,   168,
   nil,   nil,   169,   169,   nil,   nil,   169,   168,   169,    88,
   nil,   nil,   nil,    88,    88,   nil,   nil,    88,   nil,   nil,
   183,   183,    88,    88,   169,   nil,    88,   nil,   nil,    88,
   nil,   nil,   nil,   nil,   nil,   169,   nil,    88,   nil,   169,
   169,   nil,   nil,   169,   nil,   nil,   nil,   nil,   169,   169,
    93,    93,   169,   183,    93,   169,    93,   183,   183,    89,
   nil,   183,   nil,   169,   nil,   nil,   183,   nil,    89,    89,
   183,   nil,    93,   nil,   nil,   nil,   nil,    89,    89,    89,
    89,   183,   nil,    93,   nil,   nil,   nil,    93,    93,    95,
    95,    93,   nil,    95,    95,    95,    93,    93,   nil,   nil,
    93,    89,    89,    93,   nil,    89,    89,    89,    89,    89,
    89,    93,    89,    89,   173,   173,   nil,   nil,   173,   nil,
   173,   nil,    95,   nil,   nil,   nil,    95,    95,   nil,   nil,
    95,   nil,   nil,   nil,   nil,    95,   173,   nil,   nil,    95,
   165,   165,   nil,   nil,   165,   nil,   165,   173,   nil,   nil,
    95,   173,   173,   nil,   nil,   173,   nil,   nil,   nil,   nil,
   173,   173,   165,   nil,   173,   nil,   nil,   173,   nil,   nil,
   nil,   nil,   nil,   165,   nil,   173,   nil,   165,   165,   nil,
   nil,   165,   149,   149,   nil,   nil,   165,   165,   nil,   nil,
   165,   nil,   nil,   165,   nil,   149,   149,   nil,   nil,   nil,
   nil,   165,   nil,   nil,   149,   149,   149,   149,   156,   156,
   nil,   nil,   nil,   nil,   nil,   nil,   156,   156,   156,   156,
   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,   149,
   nil,   nil,   149,   149,   149,   149,   149,   149,   nil,   149,
   149,   156,   156,   nil,   nil,   156,   156,   156,   156,   156,
   156,   nil,   156,   156,   115,   115,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   115,   115,   115,   115,   119,   119,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,   119,   119,   119,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115,   115,   nil,
   nil,   115,   115,   115,   115,   115,   115,   nil,   115,   115,
   119,   119,   nil,   nil,   119,   119,   119,   119,   119,   119,
   nil,   119,   119,   254,   254,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   254,   254,   254,   254,   258,   258,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   258,   258,   258,   258,   nil,
   nil,   260,   260,   260,   260,   260,   260,   254,   260,   260,
   254,   254,   254,   254,   254,   254,   nil,   254,   254,   nil,
   nil,   nil,   nil,   258,   258,   258,   258,   258,   258,   nil,
   258,   258,   116,   116,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   116,   116,   116,   116,   255,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   255,   253,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   253,   nil,   nil,   116,   116,   nil,   nil,   116,
   116,   116,   116,   116,   116,   nil,   116,   116,   172,   nil,
   nil,   255,   255,   255,   255,   255,   255,   nil,   255,   255,
   253,   253,   253,   253,   253,   253,   nil,   253,   253,   172,
   291,   172,   172,   nil,   172,   172,   nil,   172,   nil,   172,
   nil,   172,   nil,   172,   nil,   nil,   172,   172,   nil,   262,
   nil,   291,   nil,   291,   291,   nil,   291,   291,   nil,   291,
   nil,   291,   nil,   291,   nil,   291,   nil,   nil,   291,   291,
   262,   293,   262,   262,   nil,   262,   262,   nil,   262,   nil,
   262,   nil,   262,   nil,   262,   nil,   nil,   262,   262,   nil,
   297,   nil,   293,   nil,   293,   293,   nil,   293,   293,   nil,
   293,   nil,   293,   nil,   293,   nil,   293,   nil,   nil,   293,
   293,   297,   213,   297,   297,   nil,   297,   297,   nil,   297,
   nil,   297,   nil,   297,   nil,   297,   nil,   nil,   297,   297,
   nil,   343,   nil,   213,   nil,   213,   213,   nil,   213,   213,
   nil,   213,   nil,   213,   nil,   213,   nil,   213,   nil,   nil,
   213,   213,   343,   352,   343,   343,   nil,   343,   343,   nil,
   343,   nil,   343,   nil,   343,   nil,   343,   nil,   nil,   343,
   343,   nil,   354,   nil,   352,   nil,   352,   352,   nil,   352,
   352,   nil,   352,   nil,   352,   nil,   352,   nil,   352,   nil,
   nil,   352,   352,   354,   206,   354,   354,   nil,   354,   354,
   nil,   354,   nil,   354,   nil,   354,   nil,   354,   nil,   nil,
   354,   354,   nil,   359,   nil,   206,   nil,   206,   206,   nil,
   206,   206,   nil,   206,   nil,   206,   nil,   206,   nil,   206,
   nil,   nil,   206,   206,   359,   361,   359,   359,   nil,   359,
   359,   nil,   359,   nil,   359,   nil,   359,   nil,   359,   nil,
   nil,   359,   359,   nil,   nil,   nil,   361,   nil,   361,   361,
   nil,   361,   361,   nil,   361,   nil,   361,   nil,   361,   nil,
   361,   nil,   nil,   361,   361,     4,   nil,     4,     4,   nil,
     4,     4,   nil,     4,   nil,     4,   nil,     4,   nil,     4,
   nil,   nil,     4,     4,     0,   nil,     0,     0,   nil,     0,
     0,   nil,     0,   nil,     0,   nil,     0,   nil,     0,   nil,
   nil,     0,     0 ]

racc_action_pointer = [
  1734,   177,   353,   nil,  1715,   175,   nil,   nil,   103,   nil,
   nil,   nil,   104,   343,   nil,   nil,   nil,   nil,   nil,    13,
   347,   nil,   nil,   345,   158,   nil,   206,   nil,   225,   nil,
   349,     6,   nil,   343,   nil,   316,   nil,   nil,   nil,   nil,
   326,   374,   400,   393,   -13,   465,   nil,   nil,    -7,   nil,
   nil,   nil,   nil,   nil,    -2,   281,   nil,   290,   283,   297,
   nil,   nil,   642,   296,   nil,   694,   nil,   278,   294,   nil,
   287,   796,   nil,   nil,   243,     4,   nil,   nil,   234,   229,
   nil,   245,   195,   930,   193,   177,   136,   nil,  1034,  1111,
   nil,   171,   nil,  1108,   nil,  1147,   nil,   146,   247,   259,
   nil,   260,   282,   nil,   284,   nil,   -11,   301,   719,   276,
   -15,   320,   nil,   122,   316,  1297,  1415,   318,   290,  1310,
   nil,    29,    17,   320,   nil,   nil,   nil,   nil,   324,   nil,
   nil,   nil,   318,    12,   341,   371,   366,   nil,   381,   380,
   382,   nil,   nil,   nil,    -4,   nil,    88,     0,   nil,  1238,
    19,   nil,   192,    62,    91,   nil,  1251,   232,   283,   513,
   561,   587,   617,   668,   745,  1198,   978,   231,  1004,  1060,
   771,   213,  1469,  1172,   nil,   nil,   267,   168,   nil,   nil,
   248,   nil,   nil,  1078,   125,   nil,   nil,    82,   186,   nil,
   nil,   nil,     0,   nil,   nil,    -8,   164,   322,     5,    -6,
   nil,    64,    74,    98,    96,   nil,  1655,   nil,   nil,   155,
   138,   nil,   nil,  1573,   193,   956,   909,   179,   220,   199,
   204,   241,   883,   840,   nil,   246,   nil,   858,   nil,   nil,
   nil,   nil,   nil,   nil,   810,   nil,   251,   239,   nil,   789,
   nil,   nil,   nil,   nil,   nil,    56,   nil,   186,   129,    16,
   440,   421,   330,  1436,  1356,  1427,    29,   nil,  1369,   111,
  1347,   nil,  1510,   283,   236,   312,   nil,   186,   nil,   539,
   483,   nil,    22,   nil,   nil,    48,   nil,   118,   nil,   nil,
   418,   327,   324,   nil,   330,   nil,   309,   302,   nil,   185,
   nil,  1491,   nil,  1532,   nil,   nil,   nil,  1551,   nil,   nil,
   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   144,   nil,    92,   nil,   329,   nil,   355,   nil,
   nil,   nil,   nil,   nil,   nil,    93,   360,   nil,   nil,   346,
   nil,   348,   350,   nil,   351,   355,   nil,   372,   nil,   nil,
   nil,   nil,   nil,  1592,   nil,   nil,   nil,   nil,   379,    72,
   384,   nil,  1614,   nil,  1633,   nil,   nil,   nil,   nil,  1674,
   nil,  1696,   nil,   nil,   nil ]

racc_action_default = [
  -183,  -220,   -40,   -13,    -1,  -220,   -14,    -2,  -220,   -15,
    -3,  -174,  -175,  -220,   -16,    -5,  -172,   -17,    -6,  -220,
  -220,    -7,    -8,  -220,  -173,    -9,  -220,   -10,  -220,   -11,
  -220,  -220,   -12,  -220,  -175,  -183,  -173,   -41,    -4,   -39,
  -220,  -220,  -220,  -220,  -183,  -220,  -180,  -182,  -183,  -176,
  -179,  -178,  -208,  -181,   -75,   -82,  -159,   -29,   -30,  -200,
  -107,   -31,  -220,  -218,  -161,  -220,   -34,   -32,   -64,   -33,
   -21,  -220,  -112,   -22,  -220,   -63,   -23,   -62,   -26,   -27,
  -160,  -220,   -28,  -220,  -104,   -96,  -103,   -99,  -220,  -220,
   -97,   -93,  -101,  -220,  -120,  -220,  -102,  -220,   -94,   -98,
  -100,   -95,  -220,  -163,  -165,  -162,  -183,   -43,  -220,   -75,
  -183,  -220,  -185,  -184,  -220,   -72,   -74,  -220,  -183,   -73,
  -194,  -220,  -220,  -220,  -158,  -157,   -70,   -68,   -65,   -76,
   -71,   -64,   -60,   -63,   -66,  -206,   -69,   -58,   -67,  -220,
  -206,   -80,   -81,   -83,  -220,   -20,  -220,  -220,  -108,  -220,
  -220,   -85,  -220,  -220,  -220,  -129,  -220,  -220,  -220,  -220,
  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,
  -220,  -220,  -220,  -220,  -136,  -203,  -220,  -220,  -212,  -216,
  -220,  -215,  -211,  -220,  -220,   -46,  -200,  -183,  -220,   -47,
   -49,   -63,  -220,   -56,   -55,   -82,  -220,  -220,  -206,  -220,
   365,  -193,  -191,  -220,  -220,  -188,  -220,  -217,  -196,  -220,
  -220,  -177,  -195,  -220,  -220,   -61,  -220,  -207,  -220,   -75,
  -207,  -220,  -220,  -220,   -18,  -220,  -109,  -220,  -110,   -24,
   -25,  -204,  -205,  -113,  -220,  -155,  -220,   -63,  -153,  -220,
  -147,  -156,  -148,  -154,  -106,  -220,  -139,  -124,  -126,  -125,
  -127,  -131,  -128,  -133,  -138,  -135,  -132,  -121,  -137,  -134,
  -130,  -122,  -220,  -117,  -123,  -205,  -201,  -220,  -209,  -220,
  -220,  -141,  -220,  -145,  -164,  -220,   -44,  -220,   -52,   -51,
  -220,  -220,  -206,  -114,  -220,   -45,  -220,  -220,  -186,  -220,
  -187,  -220,  -167,  -220,  -197,  -198,  -199,  -220,  -171,   -35,
   -59,   -78,   -77,   -36,  -206,   -84,   -38,   -79,   -19,  -219,
  -111,   -86,  -220,  -150,  -206,  -105,  -117,  -116,  -220,  -202,
  -213,  -210,  -214,  -142,  -140,  -220,  -220,   -50,   -48,   -90,
   -91,   -87,   -88,   -53,   -92,   -89,   -54,  -220,   -37,  -192,
  -190,  -189,  -166,  -220,  -169,  -170,   -57,  -152,  -205,  -220,
  -220,  -115,  -220,  -146,  -220,   -42,  -168,  -151,  -149,  -220,
  -119,  -220,  -144,  -118,  -143 ]

racc_goto_table = [
    31,    69,   205,    13,    31,    40,   178,    13,    35,   242,
   218,   148,    67,    23,    38,   221,     4,    23,   236,    44,
   126,    61,   135,   137,    58,   140,   103,    49,    70,   141,
     7,   130,   271,   229,    47,   317,   188,    76,   114,    69,
   199,   270,   128,   152,   333,   336,   226,   118,   273,   349,
    67,   127,   305,   240,   125,    39,   314,   132,   104,    61,
   214,   209,    58,    48,   123,   112,   146,   176,   328,   212,
   203,   204,    56,   284,   112,    76,   107,   198,   120,   294,
   196,   177,    33,   nil,   nil,   179,   nil,   nil,   351,   nil,
   nil,   nil,   nil,   nil,   nil,   313,   nil,   nil,   nil,   nil,
   nil,   nil,    56,   nil,   236,   nil,   229,   nil,   nil,   nil,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   275,   nil,   323,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,   nil,   211,
   nil,    69,   nil,   nil,   nil,   273,    47,    47,    67,   nil,
   nil,   235,    67,   nil,   nil,   nil,   nil,    61,   208,   nil,
    58,    61,   nil,   125,    58,   nil,   nil,   337,   245,   nil,
   nil,   nil,   nil,   230,   nil,   282,   nil,    76,   nil,   141,
   nil,   235,    31,   310,   nil,    13,   320,   nil,   341,   346,
   274,   126,   257,   125,   300,    23,   261,   304,   262,   350,
   353,   302,   130,   nil,   141,   nil,   nil,   nil,    56,   nil,
    69,    56,    56,   128,   nil,   357,    31,   nil,   nil,    13,
   nil,    67,   127,    31,   236,   125,    13,   295,   nil,    23,
    61,   nil,   291,    58,   nil,   nil,    23,   235,   nil,   297,
   nil,    56,   nil,   nil,   nil,   nil,   230,   nil,   nil,   125,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    78,   nil,    79,   179,   nil,   nil,   235,   nil,
   nil,   nil,    31,    56,   nil,    13,   nil,   nil,   331,   331,
   125,    56,    38,    57,   nil,    23,   nil,   330,   330,   nil,
   125,   125,   134,   nil,   136,   nil,   nil,    56,   nil,   nil,
    78,    31,    79,    31,    13,   nil,    13,    31,   nil,   nil,
    13,    38,   nil,   124,    23,   nil,    23,    38,   102,   343,
    23,    57,   nil,   235,   nil,   nil,   nil,   nil,    56,   nil,
   nil,   nil,   nil,   117,   nil,   125,   nil,   nil,    56,    56,
   nil,   nil,   nil,   nil,   193,   nil,   194,   235,   193,   nil,
   194,   nil,   nil,    31,   nil,   nil,    13,    82,   nil,   125,
   nil,   151,    31,    38,    31,    13,    23,    13,   nil,    31,
   nil,    31,    13,   nil,    13,    23,   nil,    23,   359,    38,
   361,    38,    23,    56,    23,   151,   nil,   138,    78,   nil,
    79,   238,    78,   241,    79,    82,   nil,   nil,   151,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,    57,
   nil,   nil,   124,    57,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   238,   nil,   241,   nil,   193,   nil,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,
   nil,   nil,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   134,   nil,   136,   nil,   nil,   nil,   nil,
   nil,    78,   nil,    79,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   124,   nil,   nil,   238,   nil,   241,
   nil,   nil,    57,    82,    89,   nil,   243,    82,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,   115,
   116,   nil,   nil,   119,   nil,   nil,   301,   nil,   238,   nil,
   241,   nil,   307,   nil,   nil,   193,   243,   194,   332,   332,
   334,   334,   nil,   nil,   311,   nil,   nil,   nil,   nil,   124,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   329,
   329,   155,   nil,   nil,   nil,   nil,   156,   nil,   138,   nil,
   nil,   174,   nil,   nil,   nil,   nil,    82,   nil,   nil,   322,
   nil,   nil,   nil,   238,   nil,   241,   nil,   nil,   nil,   nil,
   nil,   nil,   243,   nil,   nil,   nil,   339,   340,   nil,   nil,
   nil,   nil,   nil,   nil,   124,   nil,   nil,   238,   nil,   241,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   347,   243,   nil,   nil,   nil,   nil,   124,   nil,
   nil,   nil,   nil,   335,   335,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   nil,   258,   259,   260,   nil,
   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   243 ]

racc_goto_check = [
    34,    28,    78,    49,    34,    34,    81,    49,    29,    66,
    33,    57,    27,    20,     4,    33,     2,    20,    64,    29,
    47,    26,    32,    44,    25,    35,    68,    74,    18,    50,
     3,    28,    62,    19,    60,    59,    38,    20,    70,    28,
    38,    61,    27,    54,    43,    43,    58,    70,    64,    55,
    27,    26,    53,    65,    25,     5,    67,    30,    69,    26,
    31,    71,    25,    72,    73,     3,    18,    54,    39,    75,
    76,    77,    46,    33,     3,    20,    37,    32,     3,    79,
    54,    80,     1,   nil,   nil,    27,   nil,   nil,    59,   nil,
   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,
   nil,   nil,    46,   nil,    64,   nil,    19,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,    74,
   nil,    28,   nil,   nil,   nil,    64,    60,    60,    27,   nil,
   nil,    27,    27,   nil,   nil,   nil,   nil,    26,     3,   nil,
    25,    26,   nil,    25,    25,   nil,   nil,    33,    18,   nil,
   nil,   nil,   nil,    20,   nil,    35,   nil,    20,   nil,    50,
   nil,    27,    34,    57,   nil,    49,    81,   nil,    78,    33,
    68,    47,    60,    25,    44,    20,    60,    32,     2,    33,
    64,    50,    28,   nil,    50,   nil,   nil,   nil,    46,   nil,
    28,    46,    46,    27,   nil,    66,    34,   nil,   nil,    49,
   nil,    27,    26,    34,    64,    25,    49,    29,   nil,    20,
    26,   nil,     2,    25,   nil,   nil,    20,    27,   nil,     2,
   nil,    46,   nil,   nil,   nil,   nil,    20,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,    22,    27,   nil,   nil,    27,   nil,
   nil,   nil,    34,    46,   nil,    49,   nil,   nil,    27,    27,
    25,    46,     4,    24,   nil,    20,   nil,    26,    26,   nil,
    25,    25,    21,   nil,    22,   nil,   nil,    46,   nil,   nil,
    21,    34,    22,    34,    49,   nil,    49,    34,   nil,   nil,
    49,     4,   nil,    24,    20,   nil,    20,     4,    51,     2,
    20,    24,   nil,    27,   nil,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,    51,   nil,    25,   nil,   nil,    46,    46,
   nil,   nil,   nil,   nil,    21,   nil,    22,    27,    21,   nil,
    22,   nil,   nil,    34,   nil,   nil,    49,    23,   nil,    25,
   nil,    51,    34,     4,    34,    49,    20,    49,   nil,    34,
   nil,    34,    49,   nil,    49,    20,   nil,    20,     2,     4,
     2,     4,    20,    46,    20,    51,   nil,    23,    21,   nil,
    22,    21,    21,    22,    22,    23,   nil,   nil,    51,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    24,
   nil,   nil,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,    22,   nil,    21,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,    22,   nil,   nil,   nil,   nil,
   nil,    21,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,    21,   nil,    22,
   nil,   nil,    24,    23,    48,   nil,    23,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,    48,
    48,   nil,   nil,    48,   nil,   nil,    51,   nil,    21,   nil,
    22,   nil,    51,   nil,   nil,    21,    23,    22,    21,    21,
    22,    22,   nil,   nil,    51,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
    24,    48,   nil,   nil,   nil,   nil,    48,   nil,    23,   nil,
   nil,    48,   nil,   nil,   nil,   nil,    23,   nil,   nil,    51,
   nil,   nil,   nil,    21,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,    51,    51,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,    21,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    23,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,    23,    23,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,   nil,    48,    48,    48,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    82,    16,    30,    10,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,  -117,
    13,   228,   230,   323,   249,     0,    -3,   -12,   -23,     7,
     3,   -72,   -32,  -125,     0,   -30,   nil,    45,   -70,  -209,
   nil,   nil,   nil,  -236,   -31,   nil,    48,   -34,   448,     3,
   -26,   280,   nil,  -168,   -28,  -265,   nil,   -54,  -103,  -228,
    15,  -142,  -151,   nil,  -135,  -100,  -144,  -183,    -4,    28,
     3,   -57,    44,    16,     8,   -53,   -43,   -42,  -111,  -131,
   -16,   -91,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   185,    10,    15,    18,    21,    22,    25,
    27,    29,    32,     3,     6,     9,    14,    17,   nil,    73,
    96,    98,    99,   101,    85,    86,    90,    91,    92,    20,
   nil,   nil,   nil,   nil,    81,   nil,     5,   nil,   nil,   189,
   277,   190,   192,   nil,   nil,   139,    84,    87,   149,    63,
   129,    94,   142,   143,   nil,   234,   100,   nil,   nil,   nil,
    64,   nil,   nil,   272,    74,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,
   nil,   nil,   180 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING => 2,
 :DQPRE => 3,
 :DQMID => 4,
 :DQPOST => 5,
 :LBRACK => 6,
 :RBRACK => 7,
 :LBRACE => 8,
 :RBRACE => 9,
 :SYMBOL => 10,
 :FARROW => 11,
 :COMMA => 12,
 :TRUE => 13,
 :FALSE => 14,
 :EQUALS => 15,
 :APPENDS => 16,
 :LESSEQUAL => 17,
 :NOTEQUAL => 18,
 :DOT => 19,
 :COLON => 20,
 :LLCOLLECT => 21,
 :RRCOLLECT => 22,
 :QMARK => 23,
 :LPAREN => 24,
 :RPAREN => 25,
 :ISEQUAL => 26,
 :GREATEREQUAL => 27,
 :GREATERTHAN => 28,
 :LESSTHAN => 29,
 :IF => 30,
 :ELSE => 31,
 :IMPORT => 32,
 :DEFINE => 33,
 :ELSIF => 34,
 :VARIABLE => 35,
 :CLASS => 36,
 :INHERITS => 37,
 :NODE => 38,
 :BOOLEAN => 39,
 :NAME => 40,
 :SEMIC => 41,
 :CASE => 42,
 :DEFAULT => 43,
 :AT => 44,
 :LCOLLECT => 45,
 :RCOLLECT => 46,
 :CLASSNAME => 47,
 :CLASSREF => 48,
 :NOT => 49,
 :OR => 50,
 :AND => 51,
 :UNDEF => 52,
 :PARROW => 53,
 :PLUS => 54,
 :MINUS => 55,
 :TIMES => 56,
 :DIV => 57,
 :LSHIFT => 58,
 :RSHIFT => 59,
 :UMINUS => 60,
 :MATCH => 61,
 :NOMATCH => 62,
 :REGEX => 63 }

racc_use_result_var = true

racc_nt_base = 64

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING',
'DQPRE',
'DQMID',
'DQPOST',
'LBRACK',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'hasharrayaccesses',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'hasharrayaccess',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'hash',
'dqrval',
'dqtail',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'string',
'strings',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault',
'hashpairs',
'hashpair',
'key']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 45
  def _reduce_1( val, _values, result )
  if val[0]
    # Make sure we always return an array.
    if val[0].is_a?(Expression::ArrayConstructor)
      if val[0].children.empty?
        result = nil
      else
        result = val[0]
      end
    else
      result = aryfy(val[0])
    end
  else
    result = nil
  end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 61
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
    if val[0].instance_of?(Expression::ArrayConstructor)
      val[0].push(val[1])
      result = val[0]
    else
      result = ast Expression::ArrayConstructor, :children => [val[0],val[1]]
    end
  elsif obj = (val[0] || val[1])
    result = obj
  else result = nil
  end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 85
  def _reduce_18( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_19( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 99
  def _reduce_20( val, _values, result )
  result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => Expression::ArrayConstructor.new({}),
    :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 107
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast Expression::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 115
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 124
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(Expression::ArrayConstructor)
    val[0] = aryfy(val[0])
  end

  val[0].push(val[2])

  result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 138
  def _reduce_34( val, _values, result )
    result = ast Expression::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 159
  def _reduce_35( val, _values, result )
  @lexer.commentpop
  array = val[2]
  array = [array] if array.instance_of?(Expression::ResourceInstance)
  result = ast Expression::ArrayConstructor

  # this iterates across each specified resourceinstance
  array.each { |instance|
    raise Puppet::Dev, "Got something that isn't an instance" unless instance.instance_of?(Expression::ResourceInstance)
    # now, i need to somehow differentiate between those things with
    # arrays in their names, and normal things

      result.push ast(
        Expression::Resource,
      :type => val[0],
      :title => instance[0],

      :parameters => instance[1])
  }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_36( val, _values, result )
  # This is a deprecated syntax.
  error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 165
  def _reduce_37( val, _values, result )
  # a defaults setting for a type
  result = ast(Expression::ResourceDefaults, :type => val[0], :parameters => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 171
  def _reduce_38( val, _values, result )
  @lexer.commentpop
  result = ast Expression::ResourceOverride, :object => val[0], :parameters => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 196
  def _reduce_39( val, _values, result )
  type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? Expression::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resources as exported and pass them through.
  if val[1].instance_of?(Expression::ArrayConstructor)
    val[1].each do |obj|
      obj.send(method, true)
    end
  else
    val[1].send(method, true)
  end

  result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_40( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_41( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 220
  def _reduce_42( val, _values, result )
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(Expression::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast Expression::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 239
  def _reduce_43( val, _values, result )
    if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(Expression::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast Expression::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 249
  def _reduce_44( val, _values, result )
  if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 257
  def _reduce_45( val, _values, result )
    if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

module_eval <<'.,.,', 'grammar.ra', 265
  def _reduce_48( val, _values, result )
    result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 49 omitted

module_eval <<'.,.,', 'grammar.ra', 271
  def _reduce_50( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 272
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 273
  def _reduce_52( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 280
  def _reduce_53( val, _values, result )
  result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast Expression::CollExpr
  #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 285
  def _reduce_54( val, _values, result )
    result = ast Expression::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast Expression::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 292
  def _reduce_57( val, _values, result )
  result = ast Expression::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 58 omitted

module_eval <<'.,.,', 'grammar.ra', 302
  def _reduce_59( val, _values, result )
    if val[0].instance_of?(Expression::ResourceInstance)
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  else
    val[0].push val[2]
    result = val[0]
  end
   result
  end
.,.,

 # reduce 60 omitted

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 309
  def _reduce_62( val, _values, result )
  result = ast Expression::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 313
  def _reduce_63( val, _values, result )
  result = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 317
  def _reduce_64( val, _values, result )
  result = ast Expression::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 332
  def _reduce_72( val, _values, result )
  raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast Expression::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 335
  def _reduce_73( val, _values, result )
    result = ast Expression::VarDef, :name => val[0], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 340
  def _reduce_74( val, _values, result )
  variable = ast Expression::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast Expression::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_75( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_76( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 354
  def _reduce_77( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 358
  def _reduce_78( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 363
  def _reduce_79( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true
   result
  end
.,.,

 # reduce 80 omitted

 # reduce 81 omitted

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_82( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_83( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 380
  def _reduce_84( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

 # reduce 85 omitted

module_eval <<'.,.,', 'grammar.ra', 389
  def _reduce_86( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    result = val[0].push(val[2])
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

 # reduce 103 omitted

 # reduce 104 omitted

module_eval <<'.,.,', 'grammar.ra', 418
  def _reduce_105( val, _values, result )
  args = aryfy(val[2])
  result = ast Expression::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => args,
    :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 423
  def _reduce_106( val, _values, result )
  result = ast Expression::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => Expression::ArrayConstructor.new({}),
    :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 424
  def _reduce_107( val, _values, result )
 result = ast Expression::String, :value => val[0][:value],                  :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 425
  def _reduce_108( val, _values, result )
 result = ast Expression::Concat, :value => [ast(Expression::String,val[0])]+val[1], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 427
  def _reduce_109( val, _values, result )
 result = [val[0]] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 429
  def _reduce_110( val, _values, result )
 result = [ast(Expression::String,val[0])]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 430
  def _reduce_111( val, _values, result )
 result = [ast(Expression::String,val[0])] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 435
  def _reduce_112( val, _values, result )
  result = ast Expression::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 440
  def _reduce_113( val, _values, result )
  Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast Expression::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 442
  def _reduce_114( val, _values, result )
  result = ast Expression::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 454
  def _reduce_115( val, _values, result )
  @lexer.commentpop
  args = {
    :test => val[1],
    :statements => val[3]
  }

  args[:else] = val[5] if val[5]

  result = ast Expression::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 465
  def _reduce_116( val, _values, result )
    @lexer.commentpop
    args = {
      :test => val[1],
      :statements => ast(Expression::Nop)
  }

  args[:else] = val[4] if val[4]

  result = ast Expression::IfStatement, args
   result
  end
.,.,

 # reduce 117 omitted

module_eval <<'.,.,', 'grammar.ra', 471
  def _reduce_118( val, _values, result )
    @lexer.commentpop
    result = ast Expression::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 475
  def _reduce_119( val, _values, result )
    @lexer.commentpop
    result = ast Expression::Else, :statements => ast(Expression::Nop)
   result
  end
.,.,

 # reduce 120 omitted

module_eval <<'.,.,', 'grammar.ra', 492
  def _reduce_121( val, _values, result )
    result = ast Expression::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 495
  def _reduce_122( val, _values, result )
    result = ast Expression::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 498
  def _reduce_123( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 501
  def _reduce_124( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 504
  def _reduce_125( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 507
  def _reduce_126( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 510
  def _reduce_127( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 513
  def _reduce_128( val, _values, result )
    result = ast Expression::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 516
  def _reduce_129( val, _values, result )
    result = ast Expression::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 519
  def _reduce_130( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 522
  def _reduce_131( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 525
  def _reduce_132( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 528
  def _reduce_133( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 531
  def _reduce_134( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 534
  def _reduce_135( val, _values, result )
    result = ast Expression::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 537
  def _reduce_136( val, _values, result )
    result = ast Expression::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 540
  def _reduce_137( val, _values, result )
    result = ast Expression::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 543
  def _reduce_138( val, _values, result )
    result = ast Expression::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 546
  def _reduce_139( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 553
  def _reduce_140( val, _values, result )
  @lexer.commentpop
  options = val[3]
  options = ast Expression::ArrayConstructor, :children => [val[3]] unless options.instance_of?(Expression::ArrayConstructor)
  result = ast Expression::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 141 omitted

module_eval <<'.,.,', 'grammar.ra', 563
  def _reduce_142( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push val[1]
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0], val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 568
  def _reduce_143( val, _values, result )
  @lexer.commentpop
  result = ast Expression::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_144( val, _values, result )
  @lexer.commentpop

    result = ast(
    Expression::CaseOpt,
    :value => val[0],

    :statements => ast(Expression::ArrayConstructor)
  )
   result
  end
.,.,

 # reduce 145 omitted

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_146( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_147( val, _values, result )
  result = ast Expression::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 148 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_149( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 150 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_151( val, _values, result )
    if val[0].instance_of?(Expression::ArrayConstructor)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast Expression::ArrayConstructor, :children => [val[0],val[2]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_152( val, _values, result )
  result = ast Expression::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_160( val, _values, result )
    result = ast Expression::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 161 omitted

module_eval <<'.,.,', 'grammar.ra', 625
  def _reduce_162( val, _values, result )
 result = [val[0][:value]]
   result
  end
.,.,

 # reduce 163 omitted

module_eval <<'.,.,', 'grammar.ra', 627
  def _reduce_164( val, _values, result )
 result = val[0] += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 636
  def _reduce_165( val, _values, result )
  val[1].each do |file|
    import(file)
  end

  result = Expression::ArrayConstructor.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 647
  def _reduce_166( val, _values, result )
  @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
  @lexer.indefine = false
  result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 652
  def _reduce_167( val, _values, result )
  @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
  @lexer.indefine = false
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 661
  def _reduce_168( val, _values, result )
  @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 667
  def _reduce_169( val, _values, result )
  @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 673
  def _reduce_170( val, _values, result )
  @lexer.commentpop
  newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 677
  def _reduce_171( val, _values, result )
  @lexer.commentpop
  newnode val[1], :parent => val[2], :line => val[0][:line]
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_172( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 680
  def _reduce_173( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_174( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_175( val, _values, result )
 result = "class"
   result
  end
.,.,

 # reduce 176 omitted

module_eval <<'.,.,', 'grammar.ra', 692
  def _reduce_177( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 696
  def _reduce_178( val, _values, result )
  result = ast Expression::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 697
  def _reduce_179( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 698
  def _reduce_180( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 699
  def _reduce_181( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 182 omitted

module_eval <<'.,.,', 'grammar.ra', 705
  def _reduce_183( val, _values, result )
  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 709
  def _reduce_184( val, _values, result )
  result = ast Expression::ArrayConstructor, :children => []
   result
  end
.,.,

 # reduce 185 omitted

module_eval <<'.,.,', 'grammar.ra', 714
  def _reduce_186( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 718
  def _reduce_187( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 188 omitted

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_189( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 730
  def _reduce_190( val, _values, result )
  Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 734
  def _reduce_191( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 736
  def _reduce_192( val, _values, result )
  result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 738
  def _reduce_193( val, _values, result )
  result = [val[0][:value]]
   result
  end
.,.,

 # reduce 194 omitted

module_eval <<'.,.,', 'grammar.ra', 743
  def _reduce_195( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 196 omitted

module_eval <<'.,.,', 'grammar.ra', 748
  def _reduce_197( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 198 omitted

 # reduce 199 omitted

module_eval <<'.,.,', 'grammar.ra', 754
  def _reduce_200( val, _values, result )
  result = ast Expression::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 762
  def _reduce_201( val, _values, result )
  if val[1].instance_of?(Expression::ArrayConstructor)
    result = val[1]
  else
    result = ast Expression::ArrayConstructor, :children => [val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 769
  def _reduce_202( val, _values, result )
    if val[1].instance_of?(Expression::ArrayConstructor)
    result = val[1]
  else
    result = ast Expression::ArrayConstructor, :children => [val[1]]
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 771
  def _reduce_203( val, _values, result )
  result = ast Expression::ArrayConstructor
   result
  end
.,.,

 # reduce 204 omitted

 # reduce 205 omitted

 # reduce 206 omitted

module_eval <<'.,.,', 'grammar.ra', 776
  def _reduce_207( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 781
  def _reduce_208( val, _values, result )
  result = ast Expression::Regex, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 789
  def _reduce_209( val, _values, result )
  if val[1].instance_of?(Expression::HashConstructor)
    result = val[1]
  else
    result = ast Expression::HashConstructor, { :value => val[1] }
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 796
  def _reduce_210( val, _values, result )
    if val[1].instance_of?(Expression::HashConstructor)
    result = val[1]
  else
    result = ast Expression::HashConstructor, { :value => val[1] }
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 798
  def _reduce_211( val, _values, result )
  result = ast Expression::HashConstructor
   result
  end
.,.,

 # reduce 212 omitted

module_eval <<'.,.,', 'grammar.ra', 808
  def _reduce_213( val, _values, result )
    if val[0].instance_of?(Expression::HashConstructor)
    result = val[0].merge(val[2])
  else
    result = ast Expression::HashConstructor, :value => val[0]
    result.merge(val[2])
  end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 812
  def _reduce_214( val, _values, result )
  result = ast Expression::HashConstructor, { :value => { val[0] => val[2] } }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 813
  def _reduce_215( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 814
  def _reduce_216( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 819
  def _reduce_217( val, _values, result )
  result = ast Expression::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]
   result
  end
.,.,

 # reduce 218 omitted

module_eval <<'.,.,', 'grammar.ra', 824
  def _reduce_219( val, _values, result )
    result = ast Expression::HashOrArrayAccess, :variable => val[0], :key => val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
